name: Building JoyEnergy api

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - 'pyproject.toml'
      - 'README.md'
      - 'pre-commit-config.yaml'


concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  python_version: 3.11.5
  poetry_version: 1.8.1
  poetry_home: "/opt/poetry"

jobs:
  testing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.python_version}}

      - name: Install poetry ${{env.poetry_version}}
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | POETRY_HOME=${{env.poetry_home}} python3 - --version ${{env.poetry_version}}
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry --version

      - name: Install test dependencies
        shell: bash
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry install --with test

      - name: Run unit tests
        shell: bash
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry run pytest tests/ --cov . --cov-report html

  linting_tools:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.python_version}}

      - name: Install poetry ${{env.poetry_version}}
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | POETRY_HOME=${{env.poetry_home}} python3 - --version ${{env.poetry_version}}
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry --version

      - name: Install ci dependencies
        shell: bash
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry install --only ci

      - name: Run ruff
        shell: bash
        continue-on-error: true
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry run ruff .

      - name: Run black
        shell: bash
        continue-on-error: true
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry run black . --check

      - name: Run hadolint
        shell: bash
        continue-on-error: true
        run: |
          docker pull hadolint/hadolint
          docker run --rm -i hadolint/hadolint < .ci/Dockerfile

  semantic_versioning:
    runs-on: ubuntu-latest
    needs:
      - testing
      - linting_tools

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.python_version}}

      - name: Install poetry ${{env.poetry_version}}
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | POETRY_HOME=${{env.poetry_home}} python3 - --version ${{env.poetry_version}}
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry --version

      - name: Install ci dependencies
        shell: bash
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry install --only ci

      - name: Evaluate version
        id: package_version
        shell: bash

        run: |
          set +eou pipefail
          export PATH="${{env.poetry_home}}/bin:$PATH"

          git config user.name 'Github Actions pipeline agent'

          poetry run cz bump --yes
          retCode=$?

          tmp_version=$(awk -F'[ ="]+' '$1 == "version" { print $2 }' ./pyproject.toml | head -n 1 )
          MAJOR_VERSION=$(echo $tmp_version | cut -f 3 -d ' ' | sed 's/\"/''/g' | cut -f 1 -d '.')
          MINOR_VERSION=$(echo $tmp_version | cut -f 3 -d ' ' | sed 's/\"/''/g' | cut -f 2 -d '.')
          PATCH_VERSION=$(echo $tmp_version | cut -f 3 -d ' ' | sed 's/\"/''/g' | cut -f 3 -d '.')
          echo "BUILD_VERSION=$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION" >> "$GITHUB_OUTPUT"

          if [ $retCode -eq 0 ]; then
            git push origin || exit 1
            git push origin $(git tag --sort=creatordate | tail -n 1) || exit 1
          fi

          if [ $retCode -eq 0 ] || [ $retCode -eq 21 ]; then
            exit 0
          fi
          exit $retCode